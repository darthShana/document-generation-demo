"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Document Generator API
 * API for generating PDF documents from templates.  This microservice provides endpoints for generating various types of insurance documents in PDF format using predefined templates and data models.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@autosure.co.nz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HealthApi = exports.HealthApiFactory = exports.HealthApiFp = exports.HealthApiAxiosParamCreator = exports.DocumentGenerationApi = exports.DocumentGenerationApiFactory = exports.DocumentGenerationApiFp = exports.DocumentGenerationApiAxiosParamCreator = exports.HealthResponseStatusEnum = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
exports.HealthResponseStatusEnum = {
    Healthy: 'healthy'
};
/**
 * DocumentGenerationApi - axios parameter creator
 * @export
 */
const DocumentGenerationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Generates a Mechanical Breakdown Insurance (MBI) quote document in PDF format using the provided quote data and the MBI quote template.
         * @summary Generate MBI Quote PDF
         * @param {MbiQuoteRequest} mbiQuoteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateMbiQuote: (mbiQuoteRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'mbiQuoteRequest' is not null or undefined
            (0, common_1.assertParamExists)('generateMbiQuote', 'mbiQuoteRequest', mbiQuoteRequest);
            const localVarPath = `/generate/mbi-quote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(mbiQuoteRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.DocumentGenerationApiAxiosParamCreator = DocumentGenerationApiAxiosParamCreator;
/**
 * DocumentGenerationApi - functional programming interface
 * @export
 */
const DocumentGenerationApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DocumentGenerationApiAxiosParamCreator)(configuration);
    return {
        /**
         * Generates a Mechanical Breakdown Insurance (MBI) quote document in PDF format using the provided quote data and the MBI quote template.
         * @summary Generate MBI Quote PDF
         * @param {MbiQuoteRequest} mbiQuoteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateMbiQuote(mbiQuoteRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.generateMbiQuote(mbiQuoteRequest, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['DocumentGenerationApi.generateMbiQuote']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
exports.DocumentGenerationApiFp = DocumentGenerationApiFp;
/**
 * DocumentGenerationApi - factory interface
 * @export
 */
const DocumentGenerationApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DocumentGenerationApiFp)(configuration);
    return {
        /**
         * Generates a Mechanical Breakdown Insurance (MBI) quote document in PDF format using the provided quote data and the MBI quote template.
         * @summary Generate MBI Quote PDF
         * @param {MbiQuoteRequest} mbiQuoteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateMbiQuote(mbiQuoteRequest, options) {
            return localVarFp.generateMbiQuote(mbiQuoteRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.DocumentGenerationApiFactory = DocumentGenerationApiFactory;
/**
 * DocumentGenerationApi - object-oriented interface
 * @export
 * @class DocumentGenerationApi
 * @extends {BaseAPI}
 */
class DocumentGenerationApi extends base_1.BaseAPI {
    /**
     * Generates a Mechanical Breakdown Insurance (MBI) quote document in PDF format using the provided quote data and the MBI quote template.
     * @summary Generate MBI Quote PDF
     * @param {MbiQuoteRequest} mbiQuoteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentGenerationApi
     */
    generateMbiQuote(mbiQuoteRequest, options) {
        return (0, exports.DocumentGenerationApiFp)(this.configuration).generateMbiQuote(mbiQuoteRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DocumentGenerationApi = DocumentGenerationApi;
/**
 * HealthApi - axios parameter creator
 * @export
 */
const HealthApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns the health status of the document generator service
         * @summary Health check endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.HealthApiAxiosParamCreator = HealthApiAxiosParamCreator;
/**
 * HealthApi - functional programming interface
 * @export
 */
const HealthApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.HealthApiAxiosParamCreator)(configuration);
    return {
        /**
         * Returns the health status of the document generator service
         * @summary Health check endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck(options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.healthCheck(options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['HealthApi.healthCheck']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
exports.HealthApiFp = HealthApiFp;
/**
 * HealthApi - factory interface
 * @export
 */
const HealthApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.HealthApiFp)(configuration);
    return {
        /**
         * Returns the health status of the document generator service
         * @summary Health check endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck(options) {
            return localVarFp.healthCheck(options).then((request) => request(axios, basePath));
        },
    };
};
exports.HealthApiFactory = HealthApiFactory;
/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
class HealthApi extends base_1.BaseAPI {
    /**
     * Returns the health status of the document generator service
     * @summary Health check endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    healthCheck(options) {
        return (0, exports.HealthApiFp)(this.configuration).healthCheck(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.HealthApi = HealthApi;
