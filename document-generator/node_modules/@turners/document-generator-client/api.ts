/* tslint:disable */
/* eslint-disable */
/**
 * Document Generator API
 * API for generating PDF documents from templates.  This microservice provides endpoints for generating various types of insurance documents in PDF format using predefined templates and data models. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@autosure.co.nz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * Error message
     * @type {string}
     * @memberof ErrorResponse
     */
    'error': string;
    /**
     * List of missing required fields (for validation errors)
     * @type {Array<string>}
     * @memberof ErrorResponse
     */
    'missingFields'?: Array<string>;
}
/**
 * 
 * @export
 * @interface HealthResponse
 */
export interface HealthResponse {
    /**
     * The health status of the service
     * @type {string}
     * @memberof HealthResponse
     */
    'status': HealthResponseStatusEnum;
    /**
     * ISO timestamp of the health check
     * @type {string}
     * @memberof HealthResponse
     */
    'timestamp': string;
}

export const HealthResponseStatusEnum = {
    Healthy: 'healthy'
} as const;

export type HealthResponseStatusEnum = typeof HealthResponseStatusEnum[keyof typeof HealthResponseStatusEnum];

/**
 * 
 * @export
 * @interface MbiQuoteRequest
 */
export interface MbiQuoteRequest {
    /**
     * Unique quotation number
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'quotationNumber': string;
    /**
     * Date of the quotation
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'quotationDate': string;
    /**
     * Type of cover
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'cover': string;
    /**
     * Period of coverage
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'coverPeriod': string;
    /**
     * Maximum entitlement per claim
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'maxClaim': string;
    /**
     * Additional covers included
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'additionalCovers': string;
    /**
     * Consumable items coverage
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'consumableItems': string;
    /**
     * Repatriation costs coverage
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'repatriationCosts': string;
    /**
     * Accommodation and travel coverage
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'accommodationTravel': string;
    /**
     * Roadside assistance availability
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'roadsideAssistance': string;
    /**
     * Electric vehicle package details
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'electricPackage'?: string;
    /**
     * Vehicle registration number
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'registration': string;
    /**
     * Vehicle Identification Number
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'vin': string;
    /**
     * Vehicle make
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'make': string;
    /**
     * Vehicle model
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'model': string;
    /**
     * Vehicle variant
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'variant': string;
    /**
     * Vehicle value
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'vehicleValue': string;
    /**
     * Vehicle fuel type
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'fuelType': string;
    /**
     * Engine CC rating
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'ccRating': string;
    /**
     * Year the vehicle was built
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'year': string;
    /**
     * Vehicle odometer reading in kilometers
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'odometer': string;
    /**
     * Whether the vehicle has modifications
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'modifications': string;
    /**
     * Details of modifications if applicable
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'modificationDetails'?: string;
    /**
     * Whether there are exclusions
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'exclusions': string;
    /**
     * Details of exclusions if applicable
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'exclusionDetails'?: string;
    /**
     * Excess amount per claim
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'excessAmount': string;
    /**
     * Total quoted premium
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'totalPremium': string;
    /**
     * GST amount included
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'gst': string;
    /**
     * Name of the agent
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'agentName': string;
    /**
     * Agent number
     * @type {string}
     * @memberof MbiQuoteRequest
     */
    'agentNumber': string;
}

/**
 * DocumentGenerationApi - axios parameter creator
 * @export
 */
export const DocumentGenerationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generates a Mechanical Breakdown Insurance (MBI) quote document in PDF format using the provided quote data and the MBI quote template. 
         * @summary Generate MBI Quote PDF
         * @param {MbiQuoteRequest} mbiQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateMbiQuote: async (mbiQuoteRequest: MbiQuoteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mbiQuoteRequest' is not null or undefined
            assertParamExists('generateMbiQuote', 'mbiQuoteRequest', mbiQuoteRequest)
            const localVarPath = `/generate/mbi-quote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mbiQuoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentGenerationApi - functional programming interface
 * @export
 */
export const DocumentGenerationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentGenerationApiAxiosParamCreator(configuration)
    return {
        /**
         * Generates a Mechanical Breakdown Insurance (MBI) quote document in PDF format using the provided quote data and the MBI quote template. 
         * @summary Generate MBI Quote PDF
         * @param {MbiQuoteRequest} mbiQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateMbiQuote(mbiQuoteRequest: MbiQuoteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateMbiQuote(mbiQuoteRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DocumentGenerationApi.generateMbiQuote']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DocumentGenerationApi - factory interface
 * @export
 */
export const DocumentGenerationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentGenerationApiFp(configuration)
    return {
        /**
         * Generates a Mechanical Breakdown Insurance (MBI) quote document in PDF format using the provided quote data and the MBI quote template. 
         * @summary Generate MBI Quote PDF
         * @param {MbiQuoteRequest} mbiQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateMbiQuote(mbiQuoteRequest: MbiQuoteRequest, options?: any): AxiosPromise<File> {
            return localVarFp.generateMbiQuote(mbiQuoteRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentGenerationApi - interface
 * @export
 * @interface DocumentGenerationApi
 */
export interface DocumentGenerationApiInterface {
    /**
     * Generates a Mechanical Breakdown Insurance (MBI) quote document in PDF format using the provided quote data and the MBI quote template. 
     * @summary Generate MBI Quote PDF
     * @param {MbiQuoteRequest} mbiQuoteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentGenerationApiInterface
     */
    generateMbiQuote(mbiQuoteRequest: MbiQuoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<File>;

}

/**
 * DocumentGenerationApi - object-oriented interface
 * @export
 * @class DocumentGenerationApi
 * @extends {BaseAPI}
 */
export class DocumentGenerationApi extends BaseAPI implements DocumentGenerationApiInterface {
    /**
     * Generates a Mechanical Breakdown Insurance (MBI) quote document in PDF format using the provided quote data and the MBI quote template. 
     * @summary Generate MBI Quote PDF
     * @param {MbiQuoteRequest} mbiQuoteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentGenerationApi
     */
    public generateMbiQuote(mbiQuoteRequest: MbiQuoteRequest, options?: RawAxiosRequestConfig) {
        return DocumentGenerationApiFp(this.configuration).generateMbiQuote(mbiQuoteRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the health status of the document generator service
         * @summary Health check endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the health status of the document generator service
         * @summary Health check endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheck(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheck(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['HealthApi.healthCheck']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * Returns the health status of the document generator service
         * @summary Health check endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck(options?: any): AxiosPromise<HealthResponse> {
            return localVarFp.healthCheck(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - interface
 * @export
 * @interface HealthApi
 */
export interface HealthApiInterface {
    /**
     * Returns the health status of the document generator service
     * @summary Health check endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApiInterface
     */
    healthCheck(options?: RawAxiosRequestConfig): AxiosPromise<HealthResponse>;

}

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI implements HealthApiInterface {
    /**
     * Returns the health status of the document generator service
     * @summary Health check endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public healthCheck(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthCheck(options).then((request) => request(this.axios, this.basePath));
    }
}



